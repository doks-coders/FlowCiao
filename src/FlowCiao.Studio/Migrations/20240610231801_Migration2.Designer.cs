// <auto-generated />
using System;
using FlowCiao.Studio.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowCiao.Studio.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240610231801_Migration2")]
    partial class Migration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FlowCiao.Models.Core.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<byte[]>("ActorContent")
                        .HasMaxLength(1000000)
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ActorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActorName")
                        .IsUnique()
                        .HasFilter("[ActorName] IS NOT NULL");

                    b.ToTable("Activity", (string)null);
                });

            modelBuilder.Entity("FlowCiao.Models.Core.Flow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Flow", (string)null);
                });

            modelBuilder.Entity("FlowCiao.Models.Core.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInitial")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("FlowCiao.Models.Core.StateActivity", b =>
                {
                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StateId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("StateActivity");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.Transition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Transition", (string)null);
                });

            modelBuilder.Entity("FlowCiao.Models.Core.TransitionActivity", b =>
                {
                    b.Property<Guid>("TransitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransitionId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("TransitionActivity");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.Trigger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("TransitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TriggerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransitionId");

                    b.ToTable("Trigger", (string)null);
                });

            modelBuilder.Entity("FlowCiao.Models.Execution.FlowInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExecutionState")
                        .HasColumnType("int");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Progress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowInstance", (string)null);
                });

            modelBuilder.Entity("FlowCiao.Models.Core.State", b =>
                {
                    b.HasOne("FlowCiao.Models.Core.Flow", "Flow")
                        .WithMany("States")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.StateActivity", b =>
                {
                    b.HasOne("FlowCiao.Models.Core.Activity", "Activity")
                        .WithMany("StateActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlowCiao.Models.Core.State", "State")
                        .WithMany("StateActivities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("State");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.Transition", b =>
                {
                    b.HasOne("FlowCiao.Models.Core.Flow", "Flow")
                        .WithMany("Transitions")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlowCiao.Models.Core.State", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlowCiao.Models.Core.State", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.TransitionActivity", b =>
                {
                    b.HasOne("FlowCiao.Models.Core.Activity", "Activity")
                        .WithMany("TransitionActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlowCiao.Models.Core.Transition", "Transition")
                        .WithMany("TransitionActivities")
                        .HasForeignKey("TransitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.Trigger", b =>
                {
                    b.HasOne("FlowCiao.Models.Core.Transition", "Transition")
                        .WithMany("Triggers")
                        .HasForeignKey("TransitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("FlowCiao.Models.Execution.FlowInstance", b =>
                {
                    b.HasOne("FlowCiao.Models.Core.Flow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.Activity", b =>
                {
                    b.Navigation("StateActivities");

                    b.Navigation("TransitionActivities");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.Flow", b =>
                {
                    b.Navigation("States");

                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.State", b =>
                {
                    b.Navigation("StateActivities");
                });

            modelBuilder.Entity("FlowCiao.Models.Core.Transition", b =>
                {
                    b.Navigation("TransitionActivities");

                    b.Navigation("Triggers");
                });
#pragma warning restore 612, 618
        }
    }
}
